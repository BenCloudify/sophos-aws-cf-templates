{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "High Availability (HA) UTM CloudFormation template",
  "Parameters": {
    "HAMode": {
      "Description": "Cold has one active instance which will recover in case of a failure. Warm has two running instances, one acting as active.",
      "Type": "String",
      "AllowedValues": [
        "Cold",
        "Warm"
      ],
      "Default": "Cold"
    },
    "AMI": {
      "Description": "Autodetect uses the latest AMI based on the pricing option you select. Otherwise, specify an AMI ID.",
      "Type": "String",
      "Default": "autodetect"
    },
    "LicenseType": {
      "Description": "Select between Bring Your Own License (BYOL) or pay per instance-hour (Hourly). This parameter does not take effect if you manually enter an AMI ID.",
      "Type": "String",
      "AllowedValues": [
        "Hourly",
        "BYOL"
      ]
    },
    "InstanceSize": {
      "Description": "The default EC2 instance type is m4.large. If m4.large is not available in your region, a similar EC2 instance type will be used.",
      "Type": "String",
      "Default": "default"
    },
    "AvailabilityZone1": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Please provide an Availability Zone."
    },
    "AvailabilityZone2": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Please provide another (different) Availability Zone."
    },
    "NetworkPrefix": {
      "Description": "Please provide an available /16 CIDR block to be used by the VPC. Only the first two octets are required. For example for the network 10.6.0.0/16 you should provide 10.6",
      "Type": "String",
      "Default": "10.15"
    },
    "TrustedNetwork": {
      "Description": "Only connections from this network are allowed to ports 22 and 4444. E.g. 92.198.130.0/24. To allow access from anywhere use 0.0.0.0/0",
      "Type": "String",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
    },
    "ExistingElasticIP": {
      "Description": "Elastic IP to assign to the UTM instance. If left empty a new Elastic IP will be allocated automatically.",
      "Type": "String",
      "Default": ""
    },
    "ExistingS3Bucket": {
      "Description": "S3 Bucket to store and restore backups. If left empty a new Bucket will be created automatically.",
      "Type": "String",
      "Default": ""
    },
    "LicensePool": {
      "Description": "With BYOL the license is automatically fetched from the S3 bucket (one license per deployment). If you leave this field empty, you can install the license using WebAdmin.",
      "Type": "String",
      "Default": ""
    },
    "Hostname": {
      "Description": "The hostname can only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number (max. 64 characters).",
      "Type": "String",
      "MaxLength": "64",
      "AllowedPattern": "^[0-9A-Za-z]{1}([A-Za-z0-9.-]*)$",
      "ConstraintDescription": "Must only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number (max. 64 characters)."
    },
    "Email": {
      "Description": "The email address is only used for UTM administrative purposes.",
      "Type": "String",
      "AllowedPattern": "^[^\\']+$",
      "ConstraintDescription": "Must not be empty. Must not contain backslashes(\\) or quotes(')."
    },
    "AdminPassword": {
      "Type": "String",
      "NoEcho": "True",
      "AllowedPattern": "^[^\\']+$",
      "ConstraintDescription": "Must not be empty. Must not contain backslashes(\\) or quotes(')."
    },
    "Organization": {
      "Type": "String",
      "AllowedPattern": "^[^\\']+$",
      "ConstraintDescription": "Must not be empty. Must not contain backslashes(\\) or quotes(')."
    },
    "City": {
      "Type": "String",
      "AllowedPattern": "^[^\\']+$",
      "ConstraintDescription": "Must not be empty. Must not contain backslashes(\\) or quotes(')."
    },
    "Country": {
      "Type": "String",
      "AllowedValues": [
        "Andorra",
        "United Arab Emirates",
        "Afghanistan",
        "Antigua and Barbuda",
        "Anguilla",
        "Albania",
        "Armenia",
        "Netherlands Antilles",
        "Angola",
        "Antarctica",
        "Argentina",
        "American Samoa",
        "Austria",
        "Australia",
        "Aland Islands",
        "Aruba",
        "Azerbaidjan",
        "Bosnia and Herzegovina",
        "Barbados",
        "Bangladesh",
        "Belgium",
        "Burkina Faso",
        "Bulgaria",
        "Bahrain",
        "Burundi",
        "Benin",
        "Saint Barthelemey",
        "Bermuda",
        "Brunei Darussalam",
        "Bolivia",
        "Brazil",
        "Bahamas",
        "Bhutan",
        "Bouvet Island",
        "Botswana",
        "Belarus",
        "Belize",
        "Canada",
        "Cocos Islands",
        "Congo, Democratic Rebpulic of the",
        "Central African Republic",
        "Congo",
        "Switzerland",
        "Ivory Coast",
        "Cook Islands",
        "Chile",
        "Cameroon",
        "China",
        "Colombia",
        "Costa Rica",
        "Cuba",
        "Cape Verde",
        "Christmas Island",
        "Cyprus",
        "Czech Republic",
        "Germany",
        "Djibouti",
        "Denmark",
        "Dominica",
        "Dominican Republic",
        "Algeria",
        "Ecuador",
        "Estonia",
        "Egypt",
        "Western Sahara",
        "Eritrea",
        "Spain",
        "Ethiopia",
        "Finland",
        "Fiji",
        "Falkland Islands",
        "Micronesia",
        "Faroe Islands",
        "France",
        "Gabon",
        "Great Britain",
        "Grenada",
        "Georgia",
        "French Guyana",
        "Guernsey",
        "Ghana",
        "Gibraltar",
        "Greenland",
        "Gambia",
        "Guinea",
        "Guadeloupe",
        "Equatorial Guinea",
        "Greece",
        "S. Georgia & S. Sandwich Isls.",
        "Guatemala",
        "Guam (USA)",
        "Guinea Bissau",
        "Guyana",
        "Hong Kong",
        "Heard and McDonald Islands",
        "Honduras",
        "Croatia",
        "Haiti",
        "Hungary",
        "Indonesia",
        "Ireland",
        "Israel",
        "Isle of Man",
        "India",
        "British Indian Ocean Territory",
        "Iraq",
        "Iran",
        "Iceland",
        "Italy",
        "Jersey",
        "Jamaica",
        "Jordan",
        "Japan",
        "Kenya",
        "Kyrgyz Republic (Kyrgyzstan)",
        "Cambodia, Kingdom of",
        "Kiribati",
        "Comoros",
        "Saint Kitts & Nevis Anguilla",
        "North Korea",
        "South Korea",
        "Kuwait",
        "Cayman Islands",
        "Kazakhstan",
        "Laos",
        "Lebanon",
        "Saint Lucia",
        "Liechtenstein",
        "Sri Lanka",
        "Liberia",
        "Lesotho",
        "Lithuania",
        "Luxembourg",
        "Latvia",
        "Libya",
        "Morocco",
        "Monaco",
        "Moldavia",
        "Montenegro",
        "Saint Martin (French)",
        "Madagascar",
        "Marshall Islands",
        "Macedonia",
        "Mali",
        "Myanmar",
        "Mongolia",
        "Macau",
        "Northern Mariana Islands",
        "Martinique (French)",
        "Mauritania",
        "Montserrat",
        "Malta",
        "Mauritius",
        "Maldives",
        "Malawi",
        "Mexico",
        "Malaysia",
        "Mozambique",
        "Namibia",
        "New Caledonia (French)",
        "Niger",
        "Norfolk Island",
        "Nigeria",
        "Nicaragua",
        "Netherlands",
        "Norway",
        "Nepal",
        "Nauru",
        "Niue",
        "New Zealand",
        "Oman",
        "Panama",
        "Peru",
        "Polynesia (French)",
        "Papua New Guinea",
        "Philippines",
        "Pakistan",
        "Poland",
        "Saint Pierre and Miquelon",
        "Pitcairn Island",
        "Puerto Rico",
        "Palestinian Territory (Occupied)",
        "Portugal",
        "Palau",
        "Paraguay",
        "Qatar",
        "Reunion (French)",
        "Romania",
        "Serbia",
        "Russian Federation",
        "Rwanda",
        "Saudi Arabia",
        "Solomon Islands",
        "Seychelles",
        "Sudan",
        "Sweden",
        "Singapore",
        "Saint Helena",
        "Slovenia",
        "Svalbard Jan Mayen Islands",
        "Slovak Republic",
        "Sierra Leone",
        "San Marino",
        "Senegal",
        "Somalia",
        "Suriname",
        "Saint Tome and Principe",
        "El Salvador",
        "Syria",
        "Swaziland",
        "Turks and Caicos Islands",
        "Chad",
        "French Southern Territories",
        "Togo",
        "Thailand",
        "Tadjikistan",
        "Tokelau",
        "Timor-Leste",
        "Turkmenistan",
        "Tunisia",
        "Tonga",
        "Turkey",
        "Trinidad and Tobago",
        "Tuvalu",
        "Taiwan",
        "Tanzania",
        "Ukraine",
        "Uganda",
        "United Kingdom",
        "USA Minor Outlying Islands",
        "United States",
        "Uruguay",
        "Uzbekistan",
        "Holy See (Vatican City State)",
        "Saint Vincent & Grenadines",
        "Venezuela",
        "Virgin Islands (British)",
        "Virgin Islands (USA)",
        "Vietnam",
        "Vanuatu",
        "Wallis and Futuna Islands",
        "Samoa",
        "Yemen",
        "Mayotte",
        "South Africa",
        "Zambia",
        "Zimbabwe"
      ]
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    },
    "debugMode": {
      "Description": "Enable debug logging on the UTM instances (\"off\" to disable; \"on\" to enable)",
      "Type": "String",
      "AllowedValues": [
        "on",
        "off"
      ],
      "Default": "off"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Deployment Configuration"
          },
          "Parameters": [
            "HAMode"
          ]
        },
        {
          "Label": {
            "default": "Instance Configuration"
          },
          "Parameters": [
            "AMI",
            "LicenseType",
            "InstanceSize"
          ]
        },
        {
          "Label": {
            "default": "Infrastructure Configuration"
          },
          "Parameters": [
            "AvailabilityZone1",
            "AvailabilityZone2",
            "NetworkPrefix",
            "TrustedNetwork",
            "ExistingElasticIP",
            "ExistingS3Bucket",
            "LicensePool"
          ]
        },
        {
          "Label": {
            "default": "Settings for Initial UTM Setup"
          },
          "Parameters": [
            "Hostname",
            "Email",
            "AdminPassword",
            "Organization",
            "City",
            "Country",
            "KeyName"
          ]
        },
        {
          "Label": {
            "default": "Debug Settings"
          },
          "Parameters": [
            "debugMode"
          ]
        }
      ],
      "ParameterLabels": {
        "HAMode": {
          "default": "High Availability Standby Mode (required)"
        },
        "AMI": {
          "default": "AMI ID (required)"
        },
        "LicenseType": {
          "default": "Pricing Option (required)"
        },
        "InstanceSize": {
          "default": "Instance Type (required)"
        },
        "AvailabilityZone1": {
          "default": "Availability Zone 1 (required)"
        },
        "AvailabilityZone2": {
          "default": "Availability Zone 2 (required)"
        },
        "NetworkPrefix": {
          "default": "Prefix for VPC CIDR Block (required)"
        },
        "TrustedNetwork": {
          "default": "Trusted Network CIDR (required)"
        },
        "ExistingElasticIP": {
          "default": "Existing Elastic IP (optional)"
        },
        "ExistingS3Bucket": {
          "default": "S3 Bucket for UTM Synchronization and Backup (optional)"
        },
        "LicensePool": {
          "default": "S3 Bucket Containing Licenses (optional)"
        },
        "Hostname": {
          "default": "Hostname (required)"
        },
        "Email": {
          "default": "Admin E-Mail Address (required)"
        },
        "AdminPassword": {
          "default": "Admin Password (required)"
        },
        "Organization": {
          "default": "Organization (required)"
        },
        "City": {
          "default": "City (required)"
        },
        "Country": {
          "default": "Country (required)"
        },
        "KeyName": {
          "default": "SSH Key (required)"
        },
        "debugMode": {
          "default": "Debug Mode"
        }
      }
    }
  },
  "Mappings": {
    "RegionMap": {
      "af-south-1": {
        "Hourly": "",
        "BYOL": "",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "ap-east-1": {
        "Hourly": "",
        "BYOL": "",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "ap-northeast-1": {
        "Hourly": "ami-0a06c876a9f8abf16",
        "BYOL": "ami-05713a9ae9db618b0",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "ap-northeast-2": {
        "Hourly": "ami-0d95543deebdbfe8e",
        "BYOL": "ami-06f6e20099d66def5",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "ap-northeast-3": {
        "Hourly": "ami-068991ec22a40898d",
        "BYOL": "ami-05a41517342904a16",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "ap-south-1": {
        "Hourly": "ami-0aa21298df2612053",
        "BYOL": "ami-040a4a73d2da271ae",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "ap-southeast-1": {
        "Hourly": "ami-0b5b9729ed5e14b4a",
        "BYOL": "ami-0d2cbda249a58948d",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "ap-southeast-2": {
        "Hourly": "ami-0637ca4ba3023aae6",
        "BYOL": "ami-0d542f2cbbb1050fa",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "ca-central-1": {
        "Hourly": "ami-026cc64f6e4c4eaf0",
        "BYOL": "ami-073efbf48b97b212d",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "eu-central-1": {
        "Hourly": "ami-047666a0e81e92b9e",
        "BYOL": "ami-0b4f179779ce4b410",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "eu-north-1": {
        "Hourly": "ami-0bb1502ba82573c43",
        "BYOL": "ami-0e2bda65def8f885c",
        "ARN": "aws",
        "HAInstanceType": "m5.large"
      },
      "eu-south-1": {
        "Hourly": "",
        "BYOL": "",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "eu-west-1": {
        "Hourly": "ami-0f9be05e4a33570d5",
        "BYOL": "ami-09a329e34c2af21d0",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "eu-west-2": {
        "Hourly": "ami-07e0e2408d4776ff6",
        "BYOL": "ami-0fbb7c549345f0c92",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "eu-west-3": {
        "Hourly": "ami-0249dbe6cdf97027c",
        "BYOL": "ami-073ae440c018bd18d",
        "ARN": "aws",
        "HAInstanceType": "m5.large"
      },
      "me-south-1": {
        "Hourly": "",
        "BYOL": "",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "sa-east-1": {
        "Hourly": "ami-0a25065a17b0861bd",
        "BYOL": "ami-01524689db918231b",
        "ARN": "aws",
        "HAInstanceType": "m3.medium"
      },
      "us-east-1": {
        "Hourly": "ami-0cc2b520c55f7d172",
        "BYOL": "ami-019d863b49c96df81",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "us-east-2": {
        "Hourly": "ami-0537fe2a9dfaa2e13",
        "BYOL": "ami-0cc22e8e0536423c6",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "us-gov-east-1": {
        "Hourly": "ami-0ac7c1ebf664dbe90",
        "BYOL": "ami-0e7c5a51e360b28ff",
        "ARN": "aws-us-gov",
        "HAInstanceType": "m5.large"
      },
      "us-gov-west-1": {
        "Hourly": "ami-0986ee0b06b5acfdb",
        "BYOL": "ami-0513516457b15f6c1",
        "ARN": "aws-us-gov",
        "HAInstanceType": "m4.large"
      },
      "us-west-1": {
        "Hourly": "ami-078b566fc75f900ea",
        "BYOL": "ami-0745fadf5a42ca5bb",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      },
      "us-west-2": {
        "Hourly": "ami-014bfc7845560cb7d",
        "BYOL": "ami-059e5f1c62592d081",
        "ARN": "aws",
        "HAInstanceType": "m4.large"
      }
    },
    "HAModes": {
      "Cold": {
        "MinSize": "0",
        "DesiredCapacity": "1",
        "DeploymentType": "ha_standalone",
        "InstanceRole": "ha"
      },
      "Warm": {
        "MinSize": "1",
        "DesiredCapacity": "2",
        "DeploymentType": "ha_warm_standby",
        "InstanceRole": "ha_standalone"
      }
    }
  },
  "Conditions": {
    "DetectAMI": {
      "Fn::Equals": [
        {
          "Ref": "AMI"
        },
        "autodetect"
      ]
    },
    "DetectInstanceSize": {
      "Fn::Equals": [
        {
          "Ref": "InstanceSize"
        },
        "default"
      ]
    },
    "CreateS3Bucket": {
      "Fn::Equals": [
        {
          "Ref": "ExistingS3Bucket"
        },
        ""
      ]
    },
    "AllocateElasticIP": {
      "Fn::Equals": [
        {
          "Ref": "ExistingElasticIP"
        },
        ""
      ]
    },
    "EnableLicensePool": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "LicensePool"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "NetworkPrefix"
              },
              "0.0/16"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "NetworkPrefix"
              },
              "1.0/24"
            ]
          ]
        },
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": "HA_UTM"
          }
        ]
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "NetworkPrefix"
              },
              "2.0/24"
            ]
          ]
        },
        "AvailabilityZone": {
          "Ref": "AvailabilityZone2"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": "HA_UTM"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "Subnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Subnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "IPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Condition": "AllocateElasticIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateS3Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Prefix": "confd_backup",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            },
            {
              "Prefix": "postgres_basebackup",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            },
            {
              "Prefix": "postgres_wal",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            }
          ]
        }
      }
    },
    "UTMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "UTMPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "UtmDescribeOwnStack",
                  "Effect": "Allow",
                  "Action": "cloudformation:DescribeStacks",
                  "Resource": {
                    "Ref": "AWS::StackId"
                  }
                },
                {
                  "Sid": "UtmDetectUpdate",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Fn::FindInMap": [
                              "RegionMap",
                              {
                                "Ref": "AWS::Region"
                              },
                              "ARN"
                            ]
                          },
                          ":s3:::sophos-nsg-cf-dev"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Fn::FindInMap": [
                              "RegionMap",
                              {
                                "Ref": "AWS::Region"
                              },
                              "ARN"
                            ]
                          },
                          ":s3:::sophos-nsg-cf-dev/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Fn::FindInMap": [
                              "RegionMap",
                              {
                                "Ref": "AWS::Region"
                              },
                              "ARN"
                            ]
                          },
                          ":s3:::sophos-nsg-cf"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Fn::FindInMap": [
                              "RegionMap",
                              {
                                "Ref": "AWS::Region"
                              },
                              "ARN"
                            ]
                          },
                          ":s3:::sophos-nsg-cf/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "ConfigSyncAndBackup",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectTagging",
                    "s3:PutObject",
                    "s3:PutObjectTagging",
                    "s3:DeleteObject",
                    "s3:DeleteObjectTagging",
                    "s3:ListBucket",
                    "s3:GetBucketVersioning",
                    "s3:ListAllMyBuckets"
                  ],
                  "Resource": [
                    {
                      "Fn::If": [
                        "CreateS3Bucket",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Fn::FindInMap": [
                                  "RegionMap",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  "ARN"
                                ]
                              },
                              ":s3:::",
                              {
                                "Ref": "S3Bucket"
                              }
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Fn::FindInMap": [
                                  "RegionMap",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  "ARN"
                                ]
                              },
                              ":s3:::",
                              {
                                "Ref": "ExistingS3Bucket"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "Fn::If": [
                        "CreateS3Bucket",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Fn::FindInMap": [
                                  "RegionMap",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  "ARN"
                                ]
                              },
                              ":s3:::",
                              {
                                "Ref": "S3Bucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Fn::FindInMap": [
                                  "RegionMap",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  "ARN"
                                ]
                              },
                              ":s3:::",
                              {
                                "Ref": "ExistingS3Bucket"
                              },
                              "/*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "Sid": "EipAssociationCF",
                  "Effect": "Allow",
                  "Action": "cloudformation:DescribeStackResources",
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    }
                  ]
                },
                {
                  "Sid": "EipAssociationAS",
                  "Effect": "Allow",
                  "Action": "autoscaling:DescribeAutoScalingGroups",
                  "Resource": "*"
                },
                {
                  "Sid": "EipAssocaitionEC2",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress",
                    "ec2:DescribeAddresses"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "DisableSrcDestCheck",
                  "Effect": "Allow",
                  "Action": "ec2:ModifyInstanceAttribute",
                  "Resource": "*"
                },
                {
                  "Sid": "LicensePoolEC2Tag",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DescribeInstances"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/aws:cloudformation:stack-id": {
                        "Ref": "AWS::StackId"
                      }
                    }
                  }
                },
                {
                  "Sid": "LicensePoolEC2",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances"
                  ],
                  "Resource": "*"
                },
                {
                  "Fn::If": [
                    "EnableLicensePool",
                    {
                      "Sid": "LicensePoolS3",
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:GetBucketLocation",
                        "s3:ListBucket"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Fn::FindInMap": [
                                  "RegionMap",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  "ARN"
                                ]
                              },
                              ":s3:::",
                              {
                                "Ref": "LicensePool"
                              }
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Fn::FindInMap": [
                                  "RegionMap",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  "ARN"
                                ]
                              },
                              ":s3:::",
                              {
                                "Ref": "LicensePool"
                              },
                              "/*"
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Sid": "CloudWatchLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "UTMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "UTMRole"
          }
        ]
      }
    },
    "UTMSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Identifying security group",
        "SecurityGroupEgress": [
          {
            "Description": "Allow all outbound traffic",
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "TrustedNetworkGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable TCP access from trusted network",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "TrustedNetwork"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "Description": "Allow all outbound traffic",
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "UntrustedGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Untrusted network restricted from accessing port 22 and 4444.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "21",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "23",
            "ToPort": "4443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "4445",
            "ToPort": "5431",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5433",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "3410",
            "ToPort": "3410",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "Description": "Allow all outbound traffic",
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "UTMScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT5M"
        }
      },
      "Properties": {
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "HAModes",
            {
              "Ref": "HAMode"
            },
            "DesiredCapacity"
          ]
        },
        "HealthCheckGracePeriod": "1200",
        "MaxSize": "2",
        "MinSize": {
          "Fn::FindInMap": [
            "HAModes",
            {
              "Ref": "HAMode"
            },
            "MinSize"
          ]
        },
        "TerminationPolicies": [
          "Default"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          }
        ],
        "AvailabilityZones": [
          {
            "Ref": "AvailabilityZone1"
          },
          {
            "Ref": "AvailabilityZone2"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "UTMLaunchConfiguration"
        },
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "UnhealthyTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "HA-UTM",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "UTMLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "UTMInstanceProfile"
        },
        "ImageId": {
          "Fn::If": [
            "DetectAMI",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "LicenseType"
                }
              ]
            },
            {
              "Ref": "AMI"
            }
          ]
        },
        "InstanceType": {
          "Fn::If": [
            "DetectInstanceSize",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "HAInstanceType"
              ]
            },
            {
              "Ref": "InstanceSize"
            }
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "100",
              "VolumeType": "gp2"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "UTMSecurityGroup"
          },
          {
            "Ref": "TrustedNetworkGroup"
          },
          {
            "Ref": "UntrustedGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/usr/libexec/cloud/userdata_init.sh ha -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -d ",
                {
                  "Ref": "debugMode"
                },
                "\n",
                "exit 0\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "utm_node": [
              "utm_config"
            ]
          },
          "utm_config": {
            "files": {
              "/var/confd/var/storage/setup.ph": {
                "mode": "0640",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{ hostname => '",
                      {
                        "Ref": "Hostname"
                      },
                      "', organization => '",
                      {
                        "Ref": "Organization"
                      },
                      "', city => '",
                      {
                        "Ref": "City"
                      },
                      "', country =>'",
                      {
                        "Ref": "Country"
                      },
                      "', email => '",
                      {
                        "Ref": "Email"
                      },
                      "', password => '",
                      {
                        "Ref": "AdminPassword"
                      },
                      "' }"
                    ]
                  ]
                }
              },
              "/etc/cloud/user_data.yml": {
                "mode": "0644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "version: 0.1.0\n",
                      "instance_role: ",
                      {
                        "Fn::FindInMap": [
                          "HAModes",
                          {
                            "Ref": "HAMode"
                          },
                          "InstanceRole"
                        ]
                      },
                      "\n",
                      "deployment_type: ",
                      {
                        "Fn::FindInMap": [
                          "HAModes",
                          {
                            "Ref": "HAMode"
                          },
                          "DeploymentType"
                        ]
                      },
                      "\n",
                      "license_pool: ",
                      {
                        "Ref": "LicensePool"
                      },
                      "\n",
                      "region: ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "elastic_ip: ",
                      {
                        "Fn::If": [
                          "AllocateElasticIP",
                          {
                            "Ref": "IPAddress"
                          },
                          {
                            "Ref": "ExistingElasticIP"
                          }
                        ]
                      },
                      "\n",
                      "s3_bucket: ",
                      {
                        "Fn::If": [
                          "CreateS3Bucket",
                          {
                            "Ref": "S3Bucket"
                          },
                          {
                            "Ref": "ExistingS3Bucket"
                          }
                        ]
                      },
                      "\n",
                      "stack_name: ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "/tmp/user_data.config": {
                "mode": "0644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\n",
                      "\"confd\" => { \"backup\" => 1, \"backup_interval\" => 300, \"restore\" => 1, \"restore_done\" => 0 },\n",
                      "\"postgres\" => { \"archive_timeout\" => 300, \"backup\" => 1, \"base_backup_interval\" => 3600, \"restore\" => 1 },\n",
                      "\"syslog\" => { \"backup\" => 1, \"restore\" => 1, \"restore_period\" => 8 },\n",
                      "\"s3_bucket\" => \"",
                      {
                        "Fn::If": [
                          "CreateS3Bucket",
                          {
                            "Ref": "S3Bucket"
                          },
                          {
                            "Ref": "ExistingS3Bucket"
                          }
                        ]
                      },
                      "\",\n",
                      "\"stack_name\" => \"",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\",\n",
                      "\"elastic_ip\" => \"",
                      {
                        "Fn::If": [
                          "AllocateElasticIP",
                          {
                            "Ref": "IPAddress"
                          },
                          {
                            "Ref": "ExistingElasticIP"
                          }
                        ]
                      },
                      "\",\n",
                      "\"trusted_network\" => \"",
                      {
                        "Ref": "TrustedNetwork"
                      },
                      "\"\n}\n"
                    ]
                  ]
                }
              }
            }
          }
        }
      }
    },
    "IngressTrafficMinimal": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Terminate if the incoming traffic is suspiciously low",
        "MetricName": "NetworkIn",
        "Namespace": "AWS/EC2",
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "100",
        "AlarmActions": [
          {
            "Ref": "UnhealthyTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "UTMScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "EgressTrafficMinimal": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Terminate if the outgoing traffic is suspiciously low",
        "MetricName": "NetworkOut",
        "Namespace": "AWS/EC2",
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "100",
        "AlarmActions": [
          {
            "Ref": "UnhealthyTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "UTMScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "UnhealthyTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "Email"
            },
            "Protocol": "email"
          }
        ]
      }
    }
  },
  "Outputs": {
    "PublicIPAddress": {
      "Value": {
        "Fn::If": [
          "AllocateElasticIP",
          {
            "Ref": "IPAddress"
          },
          {
            "Ref": "ExistingElasticIP"
          }
        ]
      },
      "Description": "Use this IP to connect and to forward traffic to the UTM."
    },
    "ScalingGroup": {
      "Value": {
        "Ref": "UTMScalingGroup"
      },
      "Description": "The HA Scaling group."
    },
    "S3Bucket": {
      "Value": {
        "Fn::If": [
          "CreateS3Bucket",
          {
            "Ref": "S3Bucket"
          },
          {
            "Ref": "ExistingS3Bucket"
          }
        ]
      },
      "Description": "The S3 Bucket."
    },
    "VPCID": {
      "Value": {
        "Ref": "VPC"
      },
      "Description": "The VPC of the deployment."
    }
  }
}
