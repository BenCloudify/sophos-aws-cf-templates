{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "VpcID": {
      "Description": "ID of an existing VPC to launch the deployment in.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "LoadBalancerSubnetID": {
      "Description": "Subnet ID for Gateway.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "KeyID": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "ImageID": {
      "Description": "Autodetect uses the latest AMI. Otherwise, specify an AMI ID.",
      "Type": "String",
      "Default": "autodetect"
    },
    "InstanceSize": {
      "Description": "The default EC2 instance type is c4.large. If c4.large is not available in your region, a similar EC2 instance type will be used.",
      "Type": "String",
      "Default": "default"
    },
    "ControllerSecurityGroup": {
      "Description": "Security group ID of the Controller node. Only SSH access to the Gateway will be allowed from this security group.",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "UTMWorkerSecurityGroup": {
      "Description": "Security group ID of the instances the Gateway should balance traffic to.",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "AuthToken": {
      "Description": "AuthToken for API access. This token would be used as a shared secret for API communication between Gateway and the UTMs.",
      "Type": "String",
      "MinLength": 1
    },
    "LoadBalancerUID": {
      "Description": "Unique ID for the Gateway instance. Start with 1 if you don't have any preference. (Note: Gateways with Resource Management by the UTM will use the range 8k - 16k)",
      "Type": "Number",
      "MinValue": 1,
      "MaxValue": 16383
    },
    "LoadBalancerTunnelPrefix": {
      "Description": "The network prefix (e.g 240.0.0.0/8) to use (changes only required in case of conflict).",
      "Type": "Number",
      "Default": 240,
      "MinValue": 240,
      "MaxValue": 254
    },
    "InternetGateway": {
      "Description": "The Internet Gateway ID of the VPC.",
      "Type": "String"
    },
    "ClientCIDR": {
      "Description": "CIDR containing all clients. If in doubt, use CIDR of the whole VPC.",
      "Type": "String",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Gateway Configuration"
          },
          "Parameters": [
            "LoadBalancerUID",
            "LoadBalancerSubnetID",
            "ImageID",
            "InstanceSize",
            "AuthToken",
            "LoadBalancerTunnelPrefix"
          ]
        },
        {
          "Label": {
            "default": "Infrastructure Information"
          },
          "Parameters": [
            "VpcID",
            "InternetGateway",
            "ControllerSecurityGroup",
            "UTMWorkerSecurityGroup",
            "ClientCIDR"
          ]
        },
        {
          "Label": {
            "default": "Credentials to access the Gateway"
          },
          "Parameters": [
            "KeyID"
          ]
        }
      ],
      "ParameterLabels": {
        "VpcID": {
          "default": "VPC ID (required)"
        },
        "LoadBalancerSubnetID": {
          "default": "Subnet ID of the Gateway (required)"
        },
        "ImageID": {
          "default": "AMI ID (required)"
        },
        "InstanceSize": {
          "default": "Instance Type (required)"
        },
        "AuthToken": {
          "default": "Authorization token (required)"
        },
        "LoadBalancerUID": {
          "default": "Unique ID of the Gateway (required)"
        },
        "LoadBalancerTunnelPrefix": {
          "default": "IP address prefix (class A network) to be used for Gateway Tunnels (required)"
        },
        "InternetGateway": {
          "default": "Internet Gateway ID (required)"
        },
        "ClientCIDR": {
          "default": "CIDR of the Clients/VDIs (required)"
        },
        "ControllerSecurityGroup": {
          "default": "Security Group of the Controller node (required)"
        },
        "UTMWorkerSecurityGroup": {
          "default": "Security Group of the Worker nodes (required)"
        },
        "KeyID": {
          "default": "SSH Key (required)"
        }
      }
    }
  },
  "Mappings": {
    "RegionMap": {
      "af-south-1": {
        "EGW": "ami-0e8a8108aa5dfa861",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "ap-east-1": {
        "EGW": "ami-0a9c17f0da24413aa",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "ap-northeast-1": {
        "EGW": "ami-070b1d19b45ab45e5",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "ap-northeast-2": {
        "EGW": "ami-0e594f370f2d4f1f8",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "ap-northeast-3": {
        "EGW": "ami-0e06d5cdd5c7dc3b0",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "ap-south-1": {
        "EGW": "ami-03417ead14f07eedd",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "ap-southeast-1": {
        "EGW": "ami-0501f3b1976d5c8aa",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "ap-southeast-2": {
        "EGW": "ami-068e428aead6d9fe3",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "ca-central-1": {
        "EGW": "ami-09217be4fee89f892",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "eu-central-1": {
        "EGW": "ami-0edf50a031a9bbe67",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "eu-north-1": {
        "EGW": "ami-0e6baba448201ee47",
        "ARN": "aws",
        "EGWInstanceType": "m5.large"
      },
      "eu-south-1": {
        "EGW": "ami-0e44a49b92e2a969f",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "eu-west-1": {
        "EGW": "ami-0317b83718149a4e3",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "eu-west-2": {
        "EGW": "ami-036d315f4b1153356",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "eu-west-3": {
        "EGW": "ami-03ead3691b3f0a1ee",
        "ARN": "aws",
        "EGWInstanceType": "m5.large"
      },
      "me-south-1": {
        "EGW": "ami-08dbf55b9e2af1084",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "sa-east-1": {
        "EGW": "ami-04999c7d1132a94fc",
        "ARN": "aws",
        "EGWInstanceType": "m3.medium"
      },
      "us-east-1": {
        "EGW": "ami-0301338f707431d67",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "us-east-2": {
        "EGW": "ami-087ba9f6d8798a8c8",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "us-gov-east-1": {
        "EGW": "ami-009effe7286c7f11f",
        "ARN": "aws-us-gov",
        "EGWInstanceType": "m5.large"
      },
      "us-gov-west-1": {
        "EGW": "ami-06e48d3a4c8c455f8",
        "ARN": "aws-us-gov",
        "EGWInstanceType": "m4.large"
      },
      "us-west-1": {
        "EGW": "ami-05edc52bf51dd9309",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      },
      "us-west-2": {
        "EGW": "ami-089863da0442d7c2f",
        "ARN": "aws",
        "EGWInstanceType": "m4.large"
      }
    }
  },
  "Conditions": {
    "UseRegionMap": {
      "Fn::Equals": [
        {
          "Ref": "ImageID"
        },
        "autodetect"
      ]
    },
    "DetectInstanceSize": {
      "Fn::Equals": [
        {
          "Ref": "InstanceSize"
        },
        "default"
      ]
    }
  },
  "Resources": {
    "EGWRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "InstanceIAMRole",
      "Properties": {
        "VpcId": {
          "Ref": "VpcID"
        }
      }
    },
    "EGWRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "EGWRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "LoadBalancerRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "LoadBalancerSubnetID"
        },
        "RouteTableId": {
          "Ref": "EGWRouteTable"
        }
      }
    },
    "InstanceIAM": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": [
        "InstanceIAMRole"
      ],
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceIAMRole"
          }
        ]
      }
    },
    "InstanceIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Allow-Describe-EC2-And-ReplaceRoute",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeRouteTables",
                    "ec2:DescribeSubnets",
                    "ec2:ReplaceRoute"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "IncomingTrafficLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Incoming Traffic Group",
        "VpcId": {
          "Ref": "VpcID"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "ClientCIDR"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "ClientCIDR"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": {
              "Ref": "ClientCIDR"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "Description": "Allow all outbound traffic",
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "LB Incoming Traffic"
          }
        ]
      }
    },
    "RemoteAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Remote Access Group (SSH, Control Connection)",
        "VpcId": {
          "Ref": "VpcID"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "ControllerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5555",
            "ToPort": "5555",
            "SourceSecurityGroupId": {
              "Ref": "ControllerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5555",
            "ToPort": "5555",
            "SourceSecurityGroupId": {
              "Ref": "UTMWorkerSecurityGroup"
            }
          },
          {
            "IpProtocol": "47",
            "SourceSecurityGroupId": {
              "Ref": "UTMWorkerSecurityGroup"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "Description": "Allow all outbound traffic",
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "LB Access & Control"
          }
        ]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "IncomingTrafficLoadBalancerSecurityGroup",
        "RemoteAccessSecurityGroup",
        "InstanceIAM"
      ],
      "Properties": {
        "ImageId": {
          "Fn::If": [
            "UseRegionMap",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "EGW"
              ]
            },
            {
              "Ref": "ImageID"
            }
          ]
        },
        "InstanceType": {
          "Fn::If": [
            "DetectInstanceSize",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "EGWInstanceType"
              ]
            },
            {
              "Ref": "InstanceSize"
            }
          ]
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "IncomingTrafficLoadBalancerSecurityGroup"
              },
              {
                "Ref": "RemoteAccessSecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "LoadBalancerSubnetID"
            }
          }
        ],
        "SourceDestCheck": "false",
        "IamInstanceProfile": {
          "Ref": "InstanceIAM"
        },
        "KeyName": {
          "Ref": "KeyID"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "25"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "date +'UserData start %c' > /tmp/user_data.log\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r LoadBalancer ",
                "    --region ",
                {
                  "Ref": "AWS::Region"
                },
                " -c InitEGW >> /tmp/user_data.log 2>&1\n",
                "initctl start egw >> /tmp/user_data.log 2>&1\n",
                "/opt/aws/bin/cfn-signal '",
                {
                  "Ref": "WaitHandle"
                },
                "' >> /tmp/user_data.log 2>&1\n",
                "echo export AWS_DEFAULT_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                " > /etc/profile.d/aws-egw.sh\n",
                "echo export AWS_INSTANCE_ID=`/opt/aws/bin/ec2-metadata --instance-id | cut -d ' ' -f 2` >> /etc/profile.d/aws-egw.sh 2>> /tmp/user_data.log\n",
                "date +'UserData end %c' >> /tmp/user_data.log\n",
                "exit 0\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "LoadBalancer LB"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InitEGW": [
              "InitEGW"
            ]
          },
          "InitEGW": {
            "files": {
              "/etc/egw.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\n",
                      "  \"prefix\": ",
                      {
                        "Ref": "LoadBalancerTunnelPrefix"
                      },
                      ",\n",
                      "  \"uid\": ",
                      {
                        "Ref": "LoadBalancerUID"
                      },
                      ",\n",
                      "  \"rest_auth_token\": \"",
                      {
                        "Ref": "AuthToken"
                      },
                      "\"\n",
                      "}\n"
                    ]
                  ]
                }
              }
            }
          }
        }
      }
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": [
        "LoadBalancer"
      ],
      "Properties": {
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Count": "1",
        "Timeout": "600"
      }
    },
    "LoadBalancerAutoRecover": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": [
        "LoadBalancer"
      ],
      "Properties": {
        "AlarmDescription": "Recovering LoadBalancer when underlying hardware fails.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "1",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Fn::FindInMap": [
                    "RegionMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "ARN"
                  ]
                },
                ":automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "LoadBalancer"
            }
          }
        ]
      }
    },
    "LoadBalancerRestart": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": [
        "LoadBalancer"
      ],
      "Properties": {
        "AlarmDescription": "Restarting LoadBalancer when it fails to respond.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_Instance",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "1",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Fn::FindInMap": [
                    "RegionMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "ARN"
                  ]
                },
                ":swf:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":action/actions/AWS_EC2.InstanceId.Reboot/1.0"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "LoadBalancer"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "LoadBalancerIP": {
      "Value": {
        "Fn::GetAtt": [
          "LoadBalancer",
          "PrivateIp"
        ]
      },
      "Description": "Private IP address of the Load Balancer"
    }
  }
}
